Project Experiments

1. Compare the achievable throughput, loss, and CPU utilization in Linux and Windows platforms.

With pktrate set to 0 and protocol set to UDP, the measurings are as follow. (Server send to client)
Linux Platform:
Throughput: 154.12 Mbps
Loss: 1.89%
%CPU 47.5

Windows Platform
Throughput: 126.32 Mbps
Loss: 2.45%
%CPU: 26.4

Actually not comparable as different computer spec is used
The Linux Platform Client and Server is on the same machine, while the windows is only in the same LAN. It is hard to compare.
-----------------------------------------------
Category                    Higher
-----------------------------------------------
Achievable throughput       Windows
loss                        Windows
CPU utilization             Linux
-----------------------------------------------

==============================================================================================================

2. Compare the achievable throughput versus the number of client sessions, under both TCP and UDP.

With pktrate set to 0 and protocol set to UDP, the measurings are as follow. (Client send to server)
Linux Platform:
1 session running:  231.02 Mbps
2 sessions running: Average 165.25 Mbps per session
3 sessions running: Average 118.84 Mbps per session

The achievable throughput drops for each client. But the total throughput of all the clients sum up is increasing with session number.

==============================================================================================================

3. Compare the request mode performance under persistent versus non-persistent HTTP mode.

Persistent mode
Elapsed [60s] Replies [1380] Min [0ms] Max [50ms] Avg [44ms] Jitter [0.347101ms]

Non-persistent mode
Elapsed [60s] Replies [1043612] Min [0ms] Max [12ms] Avg [0ms] Jitter [0.057973ms]

Non-persistent mode has far lower latency.

==============================================================================================================

4. Compare the performance of TCP Cubic and TCP BBR under lossy networks (e.g., random packet loss rate > 0). Use tc to emulate the packet loss.

==============================================================================================================

5. Please describe how the server makes sure to close all the sockets and indicate the specific line(s) of code responsible for this.

==============================================================================================================

6. Please describe how you control the pool size and indicate the specific line(s) of code responsible for this.

I have a separate thread created to keep monitoring the active tasks and change the pool size. It is created when the thread pool is created.
The lines responsible for this is [TODO]

==============================================================================================================

7. Do you disable Nagle algorithm? And indicate the specific line(s) of code responsible for this.